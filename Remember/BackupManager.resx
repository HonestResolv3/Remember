<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgH15AIB9eRmBfXkpgH15AIJ9eAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACdnZsAsbKxCXd2
        ckpubGeMYF5Zi2ZkX0moqKgJkZCOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHFsZwBwbGcAcGxnKHBs
        ZxhwbGcAAAAAAAAAAACBfXkAgX15KIF9eZ+BfXkagX15AAAAAAAAAAAAAAAAAAAAAAC/v78AwcHBAMbG
        xyCpp6agfnp272djXf9YVEz/bGlk752cmp+/v8Afubm5ALe3twAAAAAAAAAAAAAAAAAAAAAAcGxnAHBs
        ZxpwbGeecGxnJ3BsZwAAAAAAe3lzC3t5cw6BfHkYgX151oF9eaiBfXgXgX15AIN/dwAAAAAAAAAAAMDA
        wADCwsINv76+qpeVkv9mYVr/TUc9/zs0Kf9RS0P/ioeE/7a2tqm6uroNuLi4AAAAAAAAAAAAbWxtAHBs
        ZwBwbGcWcGxnp3BsZ9RwbGcXa2hhDWtpYgt8enQpfHp0g316dRiBfXm0gX15/4F9ebWBfXkvfXpzAIB8
        eADCwsIAwMDAAMLCwlS4uLf3h4SA/2tmX/9dWFD/TUc+/1ZRSv93dG//r6+u9rq6ulO4uLgAt7e3AHBr
        ZgBxaGMAcGxnLnBsZ7NwbGf/cGxns2xpYxdraGKBa2hiJ3x6dBt8enTRfHp0l4B8eIuBfXn/gX15/4F9
        ed6BfXl5gHx5JXJtZgPCwsMOwcHCt7Gwr/+EgHz/gX15/356df9xbWj/cGxn/3Nwa/+npqX/ubm6trm5
        uQ1bVlADcGxnJHBsZ3dwbGfdcGxn/3BsZ/9va2aJa2hilWtoYtBraGIae3lzCXx6dLR8enT+fXp12IB8
        ePmBfXn/gX15/4F9ef2BfXnggHx4qKempKDCwsL2q6qo/4J+ev+BfXn/f3t3/3Juaf9wbGf/cW1o/6Ce
        nf+6urr2m5qYn29rZqdwbGffcGxn/XBsZ/9wbGf/b2tm+WxpY9ZraGL+a2his2tnYgh7enEAfHp0eHx6
        dP98enT/fXp1/398d/+AfXj/gX15/4B8eP+LiIT/trW0/8LCwv+lo6L/gX15/4F9ef9/e3f/cm5p/3Bs
        Z/9wbGf/mZiV/7q6uv+sq6v/e3h0/29rZv9wbGf/b2xm/25qZf9saWP/a2hi/2toYv9raGJ3aWVfAIF9
        eWB9enU1fHp04Xx6dP98enT/fHp0/316df99e3X/hIF9/6yrqv/BwcH/wcHB/52bmf+AfHj/gX15/397
        d/9ybmn/cGxn/29rZv+Rjoz/ubm5/7m5uf+hoJ7/dHBr/2xpY/9saWP/a2hi/2toYv9raGL/a2hi4Gxp
        YzRwbGdfgX1574F9eZ19e3WtfHp0/3x6dP98enT/fHp0/399d/+ko6H/wMDA/8DAwP+9vb3/kY6M/4B8
        eP+BfXn/f3t3/3Juaf9wbGf/b2tm/4OAfP+1tbX/uLi4/7i4uP+Yl5X/bmtm/2toYf9raGL/a2hi/2to
        Yv9saWOrcGxnnHBsZ+2BfXnVgX15/4F9efB/fHf9fXt1/3x6dP9+fHf/oJ+c/7e3tf+6ubj/vr6+/62s
        q/+EgH3/gX15/4F9ef9/e3f/cm5p/3BsZ/9wbGf/dHBr/6OioP+2trb/sbCv/66tq/+Tko//bmtl/2to
        Yv9saWP/bmpl/HBsZ+9wbGf/cGxn1IF9eXiBfXn6gX15/4F9ef+BfXn/gX56/5+em/+9vbz/paSe/5+d
        lf+kopz/mJWQ/4SAfP+BfXn/gX15/397d/9ybmn/cGxn/3BsZ/9zb2r/ioeB/5iWj/+Sj4f/mpeR/7S0
        tP+SkY7/cG1o/3BsZ/9wbGf/cGxn/3BsZ/pwbGd3gX15N4F9ebaBfXn/gX15/4B8eP+Rjov/vb29/7+/
        vv+lo53/nJmR/5yZkf+cmpL/kY+I/4J+ev+BfXn/f3t3/3Juaf9wbGf/cW1o/4N/eP+PjIP/jouC/46L
        gv+Zl5D/t7e2/7W1tP+Cf3v/b2tm/3BsZ/9wbGf/cGxntHBsZzaBfXl/gX15mYF9ecyBfXn+gHx4/4yI
        hf+zsrH/vr69/6aln/+bmZH/nJqS/5uZk/+QjYb/fnp1/4F9ef9/e3f/cm5p/3BsZ/9taWP/gX51/46L
        hP+PjIT/jouC/5uZkv+1tbX/qain/3x5df9va2b/cGxn/nBsZ8pwbGeXcGxnfYF9eWKBfXnxgX153YF9
        efeBfXn/gX15/4eEgP+UkY7/mZeR/5yakv+XlIr/i4Rl/2NdTP9xbGf/gn56/397d/9ybmn/cW1o/15Z
        U/9PRzT/e3NQ/4mFev+PjIT/jImC/4WDf/93c2//cGxn/3BsZ/9wbGf2cGxn23BsZ/BwbGdhgX14JIF9
        ediBfXn/gX15/4F9ef+BfXn/gX15/4B8eP+LiIL/lJGK/3NsWP+3p03/hHpI/3x4df+BfXn/f3t3/3Ju
        af9wbGf/amZi/3dtPv+rmSz/X1c8/4aDev98eHL/b2tm/3BsZv9wbGf/cGxn/3BsZ/9wbGf/cGxn13Bs
        ZyN8eGsAgX15g4F9ef+BfXn/gX15/4F9ef+BfXn/gX15/4SAfP+QjYb/e3ds/4+IZ/+Sjnz/hIB8/4F9
        ef9/e3f/cm5p/3BsZ/9zb2r/hH9t/4B3Uf9pZFf/gX11/3Nvav9wbGf/cGxn/3BsZ/9wbGf/cGxn/3Bs
        Z/9wbGeCcF9aAIF9eQCBfXkfgX15yoF9ef+BfXn/gX15/4F9ef+BfXn/gX15/4WCff+QjYf/kI2I/4eE
        gP+BfXn/gX15/397d/9ybmn/cGxn/3BsZ/93dG7/gX54/4F9d/91cWz/cGxn/3BsZ/9wbGf/cGxn/3Bs
        Z/9wbGf/cGxnyXBsZx5wbGcAfXp3AIJ+egCBfXlBgX154IF9ef+BfXn/gHx4/4F9ef+BfXn/gX15/4F9
        ef+BfXn/gX15/4F9ef+BfXn/f3t3/3Juaf9wbGf/cGxn/3BsZ/9wbGf/cGxn/3BsZ/9wbGf/cGxn/29r
        Zv9wbGf/cGxn/3BsZ99wbGdAcWxnAG1rZQAAAAAAgHx5ABgUVACBfXlGgX151Y2Khv+QjYr/g397/4B8
        eP+BfXn/gX15/4F9ef+BfXn/gX15/4F9ef9/e3f/cm5p/3BsZ/9wbGf/cGxn/3BsZ/9wbGf/cGxn/29r
        Zv9ybmn/gX56/356dv9wbGfVcGxnRnBicQBwbGcAAAAAAAAAAAAAAAAAgn14AJKRkACDgHwusbCv0r29
        vf+rqaj/jYqH/4F9ef+BfXn/gX15/4F9ef+BfXn/gX15/397d/9ybmn/cGxn/3BsZ/9wbGf/cGxn/3Bs
        Z/9wa2b/fnp2/5+enP+1tLT/p6al0XJvaS2Gg38Ab2tnAAAAAAAAAAAAAAAAAAAAAAAAAAAAw8PEAMXF
        xQ2/v7/Grqyr/7W0s/+3t7b/lpSR/4F9ef+BfXn/gX15/4F9ef+BfXn/f3t3/3Juaf9wbGf/cGxn/3Bs
        Z/9wbGf/cGxn/4iGg/+ura3/q6qp/6SioP+3trbEvb29DLu7uwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADAwMAAw8PEG7q5udqYk5D/k4+L/6ekov+4t7f/l5SR/4F9ef+BfXn/gX15/4F9ef9/e3f/cm5p/3Bs
        Z/9wbGf/cGxn/29rZv+IhoP/r66t/5uZlv+FgHv/ioaB/7GxsNi8vLwZuLi4AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMDAwADExMUjt7W14pWQjf+Ri4f/kYyI/6Ognv+0s7L/ioeD/4B8eP+BfXn/gX15/397
        d/9ybmn/cGxn/3BsZ/9va2b/endz/6qpqP+XlJH/gn14/4F8d/+Hgn7/rayr4b29vSK4uLgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAwMDAAMTFxSW1s7LllI+M/5GMiP+RjIj/ko2J/6+trP+ZlpT/gHx4/4F9
        ef+BfXn/f3t3/3Juaf9wbGf/cGxn/29rZv+LiYb/pKKg/4N+ef+CfXj/gn14/4aBfP+rqqnjvb2+JLi4
        uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMAAxcXFIrW0s+GUkIz/kYyI/5GMiP+Qi4f/qaak/5mW
        lP+AfHj/gX15/4F9ef9/e3f/cm5p/3BsZ/9wbGf/b2tm/4uJhv+dmpj/gXx3/4J9eP+CfXj/hoF8/6uq
        qeC9vr4huLi4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwADFxcUat7a12ZWRjf+RjIj/kYyI/5KN
        if+sqqn/kY6L/4B8eP+BfXn6gX154X97d8RybmnEcGxn4XBsZ/lva2b/gn98/6Gfnf+Dfnn/gn14/4J9
        eP+Hg37/rayr2L2+vhm4uLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAAMXGxg+5ubjKmJSQ/5GM
        iP+RjIj/lpKO/66sq/2IhYHggHx4nYF9eVSAfXgjf3x4DHFtaAxwbGcicGxnU29rZpt4dXHfo6Kg/YiE
        f/+CfXj/gnx3/4qGgv+wsK/Jvr/AD7i4uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/v78AxsbHBb28
        vLGdmZb/kIuH/5CLh/+koZ7/t7a1qoJ/eiV9enUDgH15AAAAAAAAAAAAAAAAAAAAAABwbGcAbGhjA3Ju
        aSOurayomJSR/4F8d/+BfHf/kIyI/7S0tLDAwcIFuLi4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDA
        wAC9vb0AwMDAjKWjof+Piob/mpaT/7i3t+jCwsM5wcHBALm5uQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAC1tbUAuLi5ALq6uzmvrq3ojIiE/4B7dv+Zl5T/uLi4irW1tAC4uLgAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAu7u7AMDAwADBwsJZtLOy/J+cmf+2tbT7wcHBfMHBwQLBwcEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC4uLgAt7i4Arm5uXusq6r7k4+L/6upqPu6urpYuLi4ALa2tgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAwMDAAMDAwCLAv7/cvr6+/cDBwZbAwMANwMDAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4uLgAuLi4Dbi5uZS2trb9t7e327i4uCG4uLgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMAAwMDAAsDAwHfAwMCLwMDAEcDAwAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4uLgAuLi4Ebm5uYq4uLh2t7e3Ari4
        uAAAAAAAAAAAAAAAAAAAAAAAz/gf88fwD+MD4AfAAeAHgAAAAAAAAAAAgAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAHAAAAD4AAAB/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AfgD/gf+B/4H/gf+D/8H/h//h8=
</value>
  </data>
</root>